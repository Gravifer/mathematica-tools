(* ::Package:: *)

(* Autogenerated Package *)

BeginPackage["HashTableInterface`"];


HashTable::usage="Interface wrapper to a HashTable";
HashTableQ::usage="Tests whether object is proper HashTable";


BeginPackage["`Package`"];


HashTableAdd::usage="";
HashTableClone::usage="";
HashTableContainsQ::usage="";
HashTableGet::usage="";
HashTableKeys::usage="";
HashTableMapAt::usage="";
HashTableRemove::usage="";
HashTableSet::usage="";
HashTableToAssociation::usage="";
HashTableValues::usage="";


EndPackage[];


Begin["`Private`"];


HashTable//ClearAll;


(* ::Subsubsection::Closed:: *)
(*Constructor*)



HashTable[
  ht_System`Utilities`HashTable?System`Utilities`HashTableQ
  ]?(System`Private`HoldEntryQ):=
  System`Private`HoldSetNoEntry@HashTable[ht]
HashTable[a___]?(System`Private`HoldEntryQ):=
  With[{ass=Association[a]},
    With[{ht=System`Utilities`HashTable[]},
      KeyValueMap[System`Utilities`HashTableAdd[ht, ##]&, ass];
      System`Private`HoldSetNoEntry@HashTable[ht]
      ]/;AssociationQ@ass
    ];
HashTableQ[HashTable[ht_System`Utilities`HashTable]?System`Private`HoldNoEntryQ]:=
  System`Utilities`HashTableQ@ht


(* ::Subsubsection::Closed:: *)
(*Format*)



Format[ht_HashTable?HashTableQ]:=
  RawBoxes@
    BoxForm`ArrangeSummaryBox[
      "HashTable",
      ht,
      None,
      {
        BoxForm`MakeSummaryItem[
          {"Item Count: ", Length@Keys[ht]},
          StandardForm
          ]
        },
      {
        },
      StandardForm
      ]


(* ::Subsubsection::Closed:: *)
(*Package Functions*)



HashTableAdd[HashTable[ht_System`Utilities`HashTable], k_, v_]:=
  System`Utilities`HashTableAdd[ht, k, v];
HashTableClone[HashTable[ht_System`Utilities`HashTable]]:=
  HashTable@System`Utilities`HashTableClone[ht];
HashTableContainsQ[HashTable[ht_System`Utilities`HashTable], k_]:=
  System`Utilities`HashTableContainsQ[ht, k];
HashTableGet[HashTable[ht_System`Utilities`HashTable], k_]:=
  Quiet[
    Check[
      System`Utilities`HashTableGet[ht, k],
      Missing["KeyAbsent", k],
      System`Utilities`HashTableGet::noget
      ],
    System`Utilities`HashTableGet::noget
    ]
HashTableKeys[HashTable[ht_System`Utilities`HashTable]]:=
  System`Utilities`HashTableKeys[ht]
HashTableMapAt[f_, h:HashTable[ht_System`Utilities`HashTable], s__]:=
  (HashTableMapAt[f, ht, s]; h);
HashTableRemove[HashTable[ht_System`Utilities`HashTable], k_]:=
  Quiet[HashTableRemove[ht, k], System`Utilities`HashTableRemove::norem];
HashTableSet[HashTable[ht_System`Utilities`HashTable], k_, v_]:=
  (
    System`Utilities`HashTableSet[ht, k, v];
    v
    );
HashTableToAssociation[HashTable[ht_System`Utilities`HashTable]]:=
  System`Utilities`HashTableToAssociation[ht];
HashTableValues[HashTable[ht_System`Utilities`HashTable]]:=
  System`Utilities`HashTableValues[ht];


(* ::Subsubsection::Closed:: *)
(*Overrides*)



ht_HashTable?HashTableQ[k_]:=
  HashTableGet[ht, k]
ht_HashTable?HashTableQ["Clone"[]]:=
  HashTableClone[ht];
HashTable/:
  Set[ht_HashTable?HashTableQ[k_], v_]:=
    HashTableSet[ht, k, v]
HashTable/:
  Unset[ht_HashTable?HashTableQ[k_]]:=
    HashTableRemove[ht, k]
HashTable/:
  Keys[ht_HashTable?HashTableQ]:=
    HashTableKeys[ht]
HashTable/:
  Values[ht_HashTable?HashTableQ]:=
    HashTableValues[ht]
HashTable/:
  KeyExistsQ[ht_HashTable?HashTableQ, k_]:=
    HashTableContainsQ[ht, k]
HashTable/:
  (Normal|Association)[ht_HashTable?HashTableQ]:=
    HashTableToAssociation[ht]


(* ::Subsubsection::Closed:: *)
(*Mutation*)



htQ[s_Symbol]:=
  MatchQ[OwnValues[s], {_:>_HashTable?HashTableQ}];
htQ~SetAttributes~HoldFirst
HashTableMutationHandler~SetAttributes~HoldAllComplete
HashTableMutationHandler[
  Set[s_Symbol?htQ[k_], v_]
  ]:=
  With[{ht=s},
    HashTableSet[ht, k, v]
    ]
HashTableMutationHandler[
  Unset[s_Symbol?htQ[k_]]
  ]:=
  With[{ht=s},
    HashTableRemove[s, k]
    ];
Language`SetMutationHandler[HashTable, HashTableMutationHandler];


End[];


EndPackage[];



