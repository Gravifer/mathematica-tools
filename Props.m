(* ::Package:: *)

(* Autogenerated Package *)

BeginPackage["Props`"];


MakeMutable::usage="Makes a Head mutable";
MakeObject::usage="Makes a Head an Object";


SetProp::usage="SetProperty but works on anything";
PropVal::usage="SetProperty but works on anything";
RemoveProp::usage="SetProperty but works on anything";
PropList::usage="SetProperty but works on anything";


BeginPackage["`Package`"];


$PropertyStore::usage="";
containsQ::usage="";
set::usage="";
get::usage="";
keys::usage="";
remove::usage="";
list::usage="";


EndPackage[];


Begin["`Private`"];


(* ::Subsection:: *)
(*Basic Interface*)



$PropertyStore=Language`NewExpressionStore["<PropertyStore>"];


(* ::Subsubsection::Closed:: *)
(*containsQ*)



containsQ[x_]:=
  $PropertyStore@"containsQ"[x];
containsQ[x_, p_]:=
  $PropertyStore@"containsQ"[x, p];


(* ::Subsubsection::Closed:: *)
(*get*)



get[x_, p_]:=
  $PropertyStore@"get"[x, p];


(* ::Subsubsection::Closed:: *)
(*set*)



set[x_, p_, v_]:=
  $PropertyStore@"put"[x, p ,v];


(* ::Subsubsection::Closed:: *)
(*remove*)



remove[x_]:=
  $PropertyStore@"remove"[x];
remove[x_, p_]:=
  $PropertyStore@"remove"[x]


(* ::Subsubsection::Closed:: *)
(*keys*)



keys[]:=
  $PropertyStore@"getKeys"[];
keys[x_]:=
  $PropertyStore@"getKeys"[x];


(* ::Subsubsection::Closed:: *)
(*list*)



list[]:=
  $PropertyStore@"listTable"[];


(* ::Subsection:: *)
(*Exposed*)



$$hold~SetAttributes~HoldAllComplete


(* ::Subsubsection::Closed:: *)
(*SetProp*)



SetProp[x_, p_->v_]:=
  set[x, p, v];
SetProp[x_, p_:>v_]:=
  set[x, p, $$hold@v];


(* ::Subsubsection::Closed:: *)
(*PropVal*)



PropVal[x_, p_]:=
  Replace[$PropertyStore@"get"[x, p],
    {
      Null:>If[!containsQ[x, p], Missing["PropertyAbsent", p], Null],
      $$hold[v_]:>v
      }
    ];


(* ::Subsubsection::Closed:: *)
(*PropList*)



PropList[x_]:=
  keys[x]


(* ::Subsubsection::Closed:: *)
(*RemoveProp*)



RemoveProp[x_, p_]:=
  remove[x, p]


(* ::Subsubsection::Closed:: *)
(*Operator Forms*)



SetProp[x_][h:(Rule|RuleDelayed)[p_ ,v_]]:=
  SetProp[x, h];
PropVal[x_][p_]:=
  PropVal[x, p];
RemoveProp[x_][p_]:=
  RemoveProp[x, p];


(* ::Subsection:: *)
(*Mutability*)



(* ::Subsubsection::Closed:: *)
(*MakeMutable*)



MakeMutable[head_Symbol]:=
  Module[{mutationHandler, objQ},
    mutationHandler~SetAttributes~HoldAllComplete;
    objQ~SetAttributes~HoldAllComplete;
    objQ[s_Symbol]:=Head[Unevaluated@s]===head;
    head/:(e:head[___])[k_]:=
      PropVal[e, k];
    head/:Set[(e:head[___])[k_], v_]:=
      SetProp[e, k->v];
    head/:SetDelayed[(e:head[___])[k_], v_]:=
      SetProp[e, k:>v];
    head/:Unset[(e:head[___])[k_]]:=
      RemoveProp[e, k];
    mutationHandler[(h:Set|SetDelayed)[s_Symbol?objQ[k_], v_]]:=
      With[{e=s}, h[e[k], v]];
    mutationHandler[Unset[s_Symbol?objQ[k_], v_]]:=
      With[{e=s}, Unset[e[k]]];
    mutationHandler[___]:=
      Language`MutationFallthrough;
    Language`SetMutationHandler[head, mutationHandler];
    ]


(* ::Subsubsection::Closed:: *)
(*MakeObject*)



MakeObject[head_Symbol]:=
  (
    MakeMutable[head];
    e:(head[___]?System`Private`HoldNotValidQ):=
      (
        System`Private`HoldSetValid[e];
        e["Valid"]=True;
        )
    )


End[];


EndPackage[];



