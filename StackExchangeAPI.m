(* ::Package:: *)

(* Autogenerated Package *)

StackExchangeAPI::usage="A symbol used for messages";
StackExchangeInterface::usage="An interface to the API";
$StackExchangeSites::usage="A set of stack exchange sites";


$SEAuthToken::usage=
  "A token that, if not none, will be passed to all API calls";
$SECallQuota::usage="The overall stack exchange API call quota";
$SECallsRemaining::usage="The stack exchange API calls remaining to a user";
$SELastCall::usage="The last API call sent";
$SECallCache::usage="The cache of all calls this session";
$SEDefaultSite::usage="The default site to use";


SEUser::usage="A Stack Exchange user";
SEQuestion::usage="A Stack Exchange question";
SEAnswer::usage="A Stack Exchange answer";
SEByID::usage="Converts an ID into a user, question, or answer";


SEBuildCall::usage="Constructs a call to the API";
SECallAPI::usage="Calls the Stack Exchange API";


SEQuestions::usage="Searches for questions matching various parameters";
SEAnswers::usage="Searches for answers matching various parameters";
SEUsers::usage="Searches for users matching various parameters";
SESearch::usage="A simplified search mechanism";


SECallInfo::usage="Turns a url into API call parameters";


SEAuthorize::usage=
  "Authorizes the app and sets the return value to $SEAuthToken";


SELookup::usage="Applies lookup to the association of the SE object";
SEGather::usage="Gathers the fields for multiple calls";


SEImport::usage="Imports stuff from a SE page";
SEChatScrape::usage="Scrapes data off a SE chat channel";


Begin["`Private`"];


$StackExchangeAPIRoot="api.stackexchange.com";
$StackExchangeAPIVersion=2.2;


(* ::Subsection:: *)
(*API Usage*)



If[!MatchQ[$StackExchangeSites,_Association],
  $StackExchangeSites=
    <|
      "StackExchange"->"stackexchange.com",
      "StackOverflow"->"stackoverflow.com",
      "Mathematica"->"mathematica.stackexchange.com"
      |>];
If[!MatchQ[$SECallCache,_Association],$SECallCache=<||>];
If[!MatchQ[$SEByIDCache,_Association],$SEByIDCache=<||>];
If[!MatchQ[$ThumbnailCache,_Association],$ThumbnailCache=<||>];
If[!MatchQ[$SEAuthToken,_String?(StringLength@#>0&)],
  $SEAuthToken=None];
If[!MatchQ[$SEClientKey,_String?(StringLength@#>0&)],
  Do[
    With[{f=
      FileNameJoin@{$PackageDirectory,
        "Private",
        file}},
      If[FileExistsQ@f,
        $SEClientKey=Import@f
        ]
      ],
    {
      file,
      {
        "SEKey.wl",
        "SEKey.m"
        }
      }
    ]
  ];
If[!MatchQ[$SECallQuota,_Integer],$SECallQuota=0];
If[!MatchQ[$SECallsRemaining,_Integer],$SECallsRemaining=0];
If[!MatchQ[$SELastCall,_String],$SELastCall=None];
If[!MatchQ[$SEDefaultSite,_String],
  $SEDefaultSite="mathematica.stackexchange.com"
  ];


StackExchangeAPI::build="Couldn't build API call from parameters";


buildCall[return:_String|{__String},site_String,parameters___Rule]:=
  URLBuild@
    <|
      "Scheme"->"https",
      "Domain"->$StackExchangeAPIRoot,
      "Path"->Flatten@{ToString@$StackExchangeAPIVersion,return},
      "Query"->{"site"->site,parameters}
      |>;
buildCall[a_Association]:=
  buildCall[
    a["CallPath"],
    a["Site"],
    Sequence@@formatParameters@a["Parameters"]
    ];
buildCall[__]:=(Message[StackExchangeAPI::build];$Failed);


SEBuildCall[
  return:_String|{__String},
  site:_String|Automatic:Automatic,
  parameters___Rule
  ]:=
  buildCall[
    return,
    Replace[site, Automatic->$SEDefaultSite],
    parameters
    ];


StackExchangeAPI::reterr="Couldn't parse return data from API call ``";
StackExchangeAPI::jsonerr="Couldn't convert data into JSON from API call ``";
StackExchangeAPI::abort="Aborting API call";
StackExchangeAPI::err="Error ``-``: ``";


callAPI[URL[baseURL_String]]:=
  With[{url=
    If[MatchQ[$SEAuthToken,_String?(StringLength@#>0&)],
      URLBuild@
        With[{a=URLParse@baseURL},
          Append[a,
            "Query"->
              Join[
                DeleteCases[
                  a["Query"],
                  "access_token"|"key"->_
                  ],
                {
                  "access_token"->$SEAuthToken,
                  "key"->$SEClientKey
                  }
                ]
            ]
          ],
      baseURL
      ]},
    Replace[
      $SELastCall=url;
      $SECallCache[url],
      _Missing:>
        With[{json=Import[url,"JSON"]},
          If[MatchQ[json,Except@$Failed],
            With[{data=
              Append[json(*/.s_String:>ImportString[s,"HTML"]*),
                "site"->Lookup[Association@URLParse[url]["Query"],"site",None]
                ]},
              If[MatchQ[data,_List],
                Replace[
                  "quota_max"/.data,
                  i_Integer:>($SECallQuota=i)
                  ];
                Replace[
                  "quota_remaining"/.data,
                  i_Integer:>($SECallsRemaining=i)
                  ];
                Switch[data,
                  {___,"items"->_,___},
                    $SECallCache[url]=
                        <|
                          "Results"->"items",
                          "MoreData"->"has_more",
                          "Site"->"site"
                          |>/.data,
                  {___,"error_id"->_,___},
                    $SECallCache[url]=
                        <|
                          "ErrorID"->"error_id",
                          "ErrorMessage"->"error_message",
                          "ErrorName"->"error_name"
                          "Site"->"site"
                          |>/.data;
                    Message[
                      StackExchangeAPI::err,
                      "ErrorID"/.$SECallCache[url],
                      "ErrorName"/.$SECallCache[url],
                      "ErrorMessage"/.$SECallCache[url]
                      ];
                    $Failed,
                  _,
                    $SECallCache[url]=data
                  ],
                Message[StackExchangeAPI::jsonerr,url];
                $Failed
                ]
              ],
            Message[StackExchangeAPI::reterr,url];
            $Failed
            ]
          ]
      ]
    ];
callAPI[return:_String|{__String},site_String,parameters___Rule]:=
  callAPI@URL@buildCall[return,site,parameters];


SECallAPI[url_String]:=callAPI@URL@url;


$queryParameterFormMap=
  <|
    "FreeFormSearch"->_String,
    "Title"->_String,
    
    "UserID"->_String,
    "UserName"->_String,
    
    "PageNumber"->_Integer|_String,
    "NumberOfEntries"->_Integer|_String,
    
    "From"->_DateObject|_String,
    "To"->_DateObject|_String,
    
    "Views"->_Integer|_String,
    "Answers"->_Integer|_String,
    
    "TaggedAs"->{__String}|_String,
    "NotTaggedAs"->{__String}|_String,
    
    "OrderBy"->"asc"|"desc",
    "SortBy"->
      "activity"|"votes"|"creation"|
      "relevance"|"reputation"|"name"|"modified",
    "MaxSortValue"->_Integer|_DateObject|_String,
    "MinSortValue"->_Integer|_DateObject|_String,
    
    "ContainsURL"->_String,
    "Migrated"->True|False|_String,
    "Accepted"->True|False|_String,
    "Closed"->True|False|_String,
    "WikiQuestion"->True|False|_String
    |>;


$queryParameterNameMap=
  <|
    "Title"->"title",
    "PageNumber"->"page",
    "From"->"fromdate",
    "To"->"todate",
    "NumberOfEntries"->"pagesize",
    "UserID"->"user",
    "TaggedAs"->"tagged",
    "NotTaggedAs"->"nottagged",
    "WikiQuestion"->"wiki",
    "OrderBy"->"order",
    "SortBy"->"sort",
    "MaxSortValue"->"max",
    "MinSortValue"->"min",
    "Migrated"->"migrated",
    "Accepted"->"accepted",
    "Closed"->"closed",
    "ContainsURL"->"url",
    "Views"->"views",
    "Answers"->"answers",
    "FreeFormSearch"->"q",
    "UserName"->"inname"
    |>;


StackExchangeAPI::badkey="Key `` not valid";
StackExchangeAPI::badfrm="Key `` cannot take on value ``";


formatParameters[parameters:{___Rule}]:=
  Table[
    With[{key=First@p,value=Last@p},
      If[KeyMemberQ[$queryParameterFormMap,key],
        If[MatchQ[value,key/.$queryParameterFormMap],
          (key/.$queryParameterNameMap)->
            URLEncode@
              Replace[value,{
                    i_Integer:>ToString@i,
                      True->"true",
                      False->"false",
                      d_DateObject:>UnixTime@d,
                      l_List:>StringJoin@Riffle[ToString/@l,";"]
                    }],
            Message[StackExchangeAPI::badfrm,key,value];
            $Failed
            ],
          Message[StackExchangeAPI::badkey,key];
          $Failed
          ]
        ],
      {p,parameters}
    ];
formatParameters[parameters_Association]:=formatParameters@Normal@parameters;


SECallInfo[url_]:=
  With[{ua=URLParse@url},
    <|
      "CallPath"->
        DeleteCases[
          Replace[ua["Path"],
            { ___,
              ToString@$StackExchangeAPIVersion,
              e__
              }:>
              {e}
              ],
          ""],
      "Site"->
        ("site"/.ua["Query"]),
      "Parameters"->
        Table[
          (First@k/.(Reverse/@Normal@$queryParameterNameMap))->Last@k,
          {k,DeleteCases[
            ua["Query"],
            "site"->_
            ]}]
      |>
    ];


SEByID[
  (h:SEAnswer|SEQuestion|SEUser)[id_,site_]
  ]:=
  SEByID[h,id,site];


SEByID[
  h:SEAnswer|SEQuestion|SEUser,
  id_Integer,
  site_String]:=
  Replace[
    $SEByIDCache[{h,id,site}],
    _Missing:>
      With[{ret=
        Switch[h,
          SEAnswer,
            SEAnswers@
              URL@
                buildCall[
                  {"answers",ToString@id},
                  site
                  ],
          SEQuestion,
            SEQuestions@
              URL@
                buildCall[
                  {"questions",ToString@id},
                  site
                  ],
          SEUser,
            SEUsers@
              URL@
                buildCall[
                  {"users",ToString@id},
                  site
                  ]
          ]
        },
        Replace[ret,
         {o_,___}:>
           ($SEByIDCache[{h,id,site}]=o)
         ]
        ]
    ];


$SEUserTemplate=
  <|
    "Name"->"display_name",
    "ID"->"user_id",
    "Reputation"->"reputation",
    "Image"->"profile_image",
    "Type"->"user_type",
    "Account"->"link"
    |>;


SEUser[l_List,site_:None]:=
  With[{
    base=
      $SEUserTemplate/.
        Append[l,(Alternatives@@Values@$SEUserTemplate)->None]
      },
    SEUser@
      Merge[
        {
          base,
          <|
            "Site"->site
            |>
          },
        Last]
    ];


Format[s:SEUser[a_Association]]:=
  SummarizedForm[
    s,
    Dynamic@
      Replace[
        $ThumbnailCache@a["Image"],
        _Missing:>
          With[{img=Import[a["Image"],"Image"]},
            If[MatchQ[img,Except@$Failed],
              $ThumbnailCache@a["Image"]=Image[img,ImageSize->{32,32}],
              None
              ]
            ]
        ],
    {
      Key@"Name",
      Key@"ID"
      },
    {
      Key@"Reputation",
      "Account":>Replace[Key@"Account",l:Except[None]:>Hyperlink@l]
      }
    ];


Format[s:SEUser[i_Integer,site_]]:=
  SummarizedForm[
    s,
    "SEUser",
    None,
    {
      "ID"->i
      },
    {
      "Site"->site
      }
    ];


$SEQuestionTemplate=
  <|
    "Title"->"title",
    "ID"->"question_id",
    "Link"->"link",
    "CreationDate"->"creation_date",
    "LastActivityDate"->"last_activity_date",
    "LastEditDate"->"last_edit_date",
    "Owner"->"owner",
    "Answers"->"answer_count",
    "Views"->"view_count",
    "Answered"->"is_answered",
    "Score"->"score",
    "AcceptedAnswer"->"accepted_answer_id",
    "Tags"->"tags"
    |>;


SEQuestion[l_List,site_:None]:=
  With[{
    base=
      $SEQuestionTemplate/.
        Append[l,(Alternatives@@Values@$SEQuestionTemplate)->None]
      },
    SEQuestion@
      Merge[
        {
          base,
          <|
            "Owner"->SEUser@base["Owner"],
            "CreationDate"->FromUnixTime@base["CreationDate"],
            "LastActivityDate"->FromUnixTime@base["LastActivityDate"],
            "LastEditDate"->
              Replace[base["LastEditDate"],
                d:Except[None]:>FromUnixTime@d
                ],
            "Site"->site,
            "AcceptedAnswer"->
              Replace[
                base["AcceptedAnswer"],
                i_Integer:>
                  SEAnswer[i,
                    Replace[base["Link"],
                      s:Except[None]:>URLParse[s]["Domain"]
                      ]
                    ]
                ]
            |>
          },
        Last]
    ];


Format[s:SEQuestion[a_Association]]:=
  SummarizedForm[
    s,
    Replace[
      a["Score"],
      None->0
      ],
    {
      "Title"->
        Replace[a["Link"],{
          _Missing|None->Key@"Title",
          l_:>Hyperlink[Key@"Title",l]
          }]
      },
    {
      "User"->Key@"Owner",
      "ID"->Key@"ID",
      "Created"->Key@"CreationDate",
      "Answered"->Key@"Answered"
      }
    ];


Format[s:SEQuestion[i_Integer,site_:None]]:=
  SummarizedForm[
    s,
    "SEQuestion",
    None,
    {
      "ID: "->i
      },
    {
      "Site: "->site
      }
    ];


$SEAnswerTemplate=
  <|
    "Title"->"title",
    "Body"->"body",
    "Owner"->"owner",
    "Question"->"question_id",
    "ID"->"answer_id",
    "UpVotes"->"down_vote_count",
    "DownVotes"->"down_vote_count",
    "Score"->"score",
    "Accepted"->"is_accepted",
    "CreationDate"->"creation_date",
    "LastActivityDate"->"last_activity_date",
    "LastEditDate"->"last_edit_date"
    |>;


SEAnswer[l_List,site_:None]:=
  Block[{
    answerAssociation=
      $SEAnswerTemplate/.
        Append[l,(Alternatives@@Values@$SEAnswerTemplate)->None]
      },
    answerAssociation=
      Merge[
        {
          answerAssociation,
          <|
            "Owner"->SEUser@answerAssociation["Owner"],
            "Question"->
              SEQuestion[
                answerAssociation["Question"],
                site
                ],
            "CreationDate"->
              Replace[answerAssociation["CreationDate"],
                d:Except[None]:>DateObject@d
                ],
            "LastActivityDate"->
              Replace[answerAssociation["LastActivityDate"],
                d:Except[None]:>DateObject@d
                ],
            "LastEditDate"->
              Replace[answerAssociation["LastEditDate"],
                d:Except[None]:>DateObject@d
                ],
            "Site"->site
            |>
          },
        Last];
    AppendTo[answerAssociation,
      "Link"->
        Replace[SELookup[answerAssociation,"Question"],
          q_SEQuestion:>
            Replace[SELookup[q,"Link",None],
              url_String:>
                TemplateApply["``#``",
                  {url,SELookup[answerAssociation,"ID"]}]
              ]
          ]
      ];
    SEAnswer@answerAssociation
          
    ];


Format[s:SEAnswer[a_Association]]:=
  SummarizedForm[
    s,
    Grid@{
      {
        Replace[
          a["UpVotes"],
          None->0
          ],
        Style["\[Checkmark]",Green]},
      {
        Replace[
          a["DownVotes"],
          None->0
          ],
        Style["\[Times]",Red]}
      },
    {""},
    {
      Replace[a["Link"],{
        _Missing|None:>
          With[{l=SELookup[SEByID@a["Question"],"Link"]},
            Hyperlink[
              l<>"#"<>ToString@a["ID"]
              ]
            ],
        l_:>Hyperlink[l]
        }],
      "User"->Key@"Owner",
      "Question":>Key@"Question",
      "ID"->Key@"ID",
      "Created"->Key@"CreationDate"
      },
    a
    ];


Format[s:SEAnswer[i_Integer,site_String]]:=
  SummarizedForm[
    s,
    "SEAnswer",
    None,
    {
      "ID: "->i
      },
    {
      "Site: "->site
      }
    ];


Options[SEQuestions]=
  Normal@$queryParameterFormMap;


SEQuestions[results_Association]:=
  With[{s="Site"/.results},
    SEQuestion[#,s]&/@("Results"/.results)
    ];
SEQuestions[call_URL]:=
  With[{results=callAPI@call},
      Replace[results,
        _Association:>SEQuestions@results
        ]
      ];
SEQuestions[site:_String|Automatic:Automatic,parameters:OptionsPattern[]]:=
  With[{
    call=
      buildCall[
          {"search","advanced"},
          Replace[
            site,
            Automatic->$SEDefaultSite
            ],
          Sequence@@formatParameters@{parameters}
          ]
    },
    If[call=!=$Failed,
      SEQuestions@URL@call,
      Message[StackExchangeAPI::abort];
      $Failed
      ]
    ];


Options[SEAnswers]=
  FilterRules[
    Normal@$queryParameterFormMap,
    {
      "PageNumber",
      "NumberOfEntries",
      "From",
      "To",
      "OrderBy",
      "SortBy",
      "MinSortValue",
      "MaxSortValue"
      }
    ];


SEAnswers[data_Association]:=
  With[{s="Site"/.data},
    SEAnswer[#,s]&/@("Results"/.data)
    ];
SEAnswers[call_URL]:=
  With[{data=callAPI@call},
    Replace[data,_Association:>SEAnswers@data]
    ];
SEAnswers[site:_String|Automatic:Automatic,parameters:OptionsPattern[]]:=
  With[{
    call=
      buildCall[
        "answers",
        Replace[
          site,
          Automatic->$SEDefaultSite
          ],
        Sequence@@formatParameters@{parameters}
        ]
      },
    If[call=!=$Failed,
      SEAnswers@URL@call,
      Message[StackExchangeAPI::abort];
      $Failed
      ]
    ];


Options[SEUsers]=
  FilterRules[
    Normal@$queryParameterFormMap,
    {
      "PageNumber",
      "NumberOfEntries",
      "From",
      "To",
      "OrderBy",
      "SortBy",
      "MinSortValue",
      "MaxSortValue"
      }
    ];


SEUsers[data_Association]:=
  With[{s="Site"/.data},
    SEUser[#,s]&/@("Results"/.data)
    ];
SEUsers[call_URL]:=
  With[{data=callAPI@call},
    Replace[data,_Association:>SEUsers@data]
    ];
SEUsers[
  site:_String|Automatic:Automatic,
  parameters:OptionsPattern[]]:=
  With[{
    call=
      buildCall[
        "users",
        Replace[
            site,
            Automatic->$SEDefaultSite
            ],
        Sequence@@formatParameters@{parameters}
        ]},
    If[call=!=$Failed,
      SEUsers@URL@call,
      Message[StackExchangeAPI::abort];
      $Failed
      ]
    ];


Options[SESearch]=Normal@$queryParameterFormMap;
SESearch[
  site:_String?(MemberQ[Values@$StackExchangeSites,#]&)|Automatic:Automatic,
  objects:"Questions"|"Answers"|"Users"|"Q"|"A"|"U"|_List:"Questions",
  query:_String|None:None,
  ops:OptionsPattern[]]:=
  With[{obs=
    DeleteCases[Except[SEQuestions|SEAnswers|SEUsers]]@
    DeleteDuplicates@
      Replace[Flatten@{objects},{
        "Questions"|"Q"->SEQuestions,
        "Answers"|"A"->SEAnswers,
        "Users"|"U"->SEUsers
        },
        1]},
    Replace[
      Join@@
        DeleteCases[$Failed]@
        Table[
          Switch[ob,
            SEQuestions,
              SEQuestions[
                site,
                Sequence@@
                DeleteDuplicatesBy[
                  {ops,
                    "SortBy"->"votes",
                    If[query=!=None,
                      "FreeFormSearch"->query,
                      Nothing
                      ]},
                  First]
                ],
            SEAnswers,
              SEAnswers[
                site,
                Sequence@@
                DeleteDuplicatesBy[
                  {ops,
                    If[query=!=None,
                      "FreeFormSearch"->query,
                      Nothing
                      ]},
                  First]
                ],
            SEUsers,
              SEUsers[
                site,
                Sequence@@
                DeleteDuplicatesBy[
                  {ops,
                    If[query=!=None,
                      "UserName"->query,
                      Nothing
                      ]},
                  First]
                ]
            ],
          {ob,obs}
          ],
        {
          {}->None,
          {r_}:>r
          }]
        
    ]


$SEImportFormats=<|
 "Code":>("<code>"~~c:Shortest[__]~~"</code>":>c),
 "Strings":>
   Function[url,
     Join@@
       StringCases[SEImport[url,"Code"],
         "\""~~
           s:Shortest[Except["\""]..]
         ~~"\""~~
           (","|" "|EndOfLine|EndOfString):>s
         ]
       ]
 |>;


SEImport::nourl="No URL associated with ``";


SEImport[
  url_String,
  format:_String:"Code"]:=
  Replace[
    $SEImportFormats[format],{
      _Missing:>
        Import[url,format],
      e:(_StringExpression|_Alternatives|_Rule|_RuleDelayed):>
        StringCases[Import[url,"Text"],e],
      f:(_Function|_Symbol):>
        f@url
      }];
SEImport[
  obj:_SEQuestion|_SEAnswer|_SEUser,
  format:_String:"Code"
  ]:=
  Replace[
    SELookup[obj,"Link"],{
      _Missing:>(Message[SEImport::nourl,obj];$Failed),
      url_String:>SEImport[url,format]
    }];  


chatURL[chatSpec__Integer]:=
  "https://chat.stackexchange.com/transcript/"<>(ToString/@{chatSpec});
chatURL[url_String]:=
  With[{p=URLParse@url},
    chatURL@@
      Replace[p,
        {___,"transcript",spec__}:>{spec}
        ]
    ];


SEChatScrape[chatRoom_]:=
  With[{ts=
    Column[{First@First@#,
      Row@{Spacer[10],
          RawBoxes@Cell[Thread[Last@#,TextData],"Text"]}},
          Dividers->{{},{2->Gray}}]&/@
      Partition[
        SplitBy[
          StringCases[
            Import[chatURL@chatRoom,"Text"],
            {
              u:("<div class=\"username\">"~~Shortest[__]~~"</div>"):>
                {"user",u},
              "<div class=\"content\">"~~content:Shortest[__]~~"</div>":>
                StringTrim@content(*ImportString[content,"HTML"]*)
              }]/.{
                  {"user",u_}:>
                    First@StringCases[u,
                      {
                        "href=\""~~link__~~"\" "~~__~~">"~~
                          name__~~"</a></div>":>
                          Hyperlink[name,"https://chat.stackexchange.com"<>link]
                        }
                      ],
                    content_String:>
                      TextData@
                        Append[
                          Replace[
                            StringReplace[content,
                              "<code>"~~code:Shortest[__]~~"</code>":>
                              StyleBox[code,"Input"]],{
                            s_String:>
                              {ImportString[s,"HTML"]},
                            StringExpression[bits__]:>
                              Riffle[
                                ReplaceAll[{bits},
                                  s_String:>ImportString[s,"HTML"]
                                  ],
                                " "]
                            }],
                            "\n"
                          ]
                  },
              Head
            ],
          2]},
      Column[ts,Dividers->Center]~Style~(ShowStringCharacters->False)
    ]//Panel


$SEAuthURL="https://stackexchange.com/oauth/dialog";
$SEClientID="8553";
$SERedirectURI="https://stackexchange.com/oauth/login_success";


$SEKeyExample=Image[CompressedData["
1:eJztXcuvM0l1R0kWWeYPYBTCQ4qQSCbRiAGGEckikSJFZDS8RCQWoBBEooGE
DwmSMHCVxCxiQbAEjqLeeOONI3kxVuSFkbyIhRdeeNFoLFkjTzqhk0aWaGgw
dGb63pOqsrv7nOqqdj/ua+53ftLhY67d7urqql+dOq/6jU99/vk//6U3velN
j35V/M/zn/zS73/hC5/8mw/9mviPj3zu0Wc/87lP/9kffe6Ln/7Mp7/wnk/9
svjj7wn5U/H9XxH/RlEELCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsj7dM
p1MWFhYWFhYWFpYbEAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDwWAwGAwGg8Fg
MBgMBoPBYDAYDAbDitdfg6v1Ei6dLlw++gQkzz0NyfvfDsmTT0DyzjezsLCw
sJhEcqTkSsGZkjslh0oulZzKYDAYV9vvw+XXvwjJe99693zFwsLC8lDkfW9T
3Co5lsFgPH64emUDly98lPLCh5+By3/+Klx99yXx+csAP/kR78kYDAajDJIj
BVdKzpTcefnNFxWXYm69fOFjinMZDMZjgNdipUsl7zpxwLvfApff+hpcvbq9
65YxGAzGg4HkVMmtkmMV1wrOldwrOZjBYDxMXP3gVUg+8mw+57/xFYAovOtm
MRgMxsOF4FjJtdneVnCw5GIGg/GwcPXyGpJn33Gc5x98imMGGAwG4xYhOVdy
r+JgwcWSkxkMxsOA0rFOtuvLz38c4OeHu24Sg8FgPH4Q3Cs5OI3ZYF2LwXjj
Q/kKT3asyxc/C5Akd90kBoPBeHwhOFhycWbXYh8ig/HGxWtxFo+l7FisYzEY
DMbdQ+paqV1LcDTHxjMYb0yovMJTPBb7ChkMBuMeQXByGq+l8hAZjAeM+BBB
FAk5PJw9hazVovJbhNx0zHsSebCYTmE6W4J/YJsZ4/HAbYz7h8hNjBwqNj7l
6TdQfa04DMDzPPD8EBL6wenve+ARy8hxgGn3Ai4upPRg+0AGR1qDVNVu0JEc
wJdz4TRPqiOBve9p8+gAs17af0IGSzrv0L38/f23qR2CrVg7xzBw+tB3HHCE
DEdjmC9d8MMzgwP3ayXxwbY8x1EA68UMRoOBaoOUwXAE0/nqfDsYRmRrg+j3
qKpalK4bQvbkZZ0Z9/Ib2f0qiJhPxSbdE25KQnAX0+Oc6MuxOBBzYgLz1QZu
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
rxMSRuSdtNWzsG1N5hk1soE04jKaF2HVQYjNra/mSu252obvKl+rv+sjrlvP
Kv09ZCvtncZW6G+zGK21uwEvCM/M6WbchPPeyvxrmzGK40e23N005/dMR5K2
oq0Ly8UCFkKW0s8UlNgdWrZBgegrJ/0/cnM9SI9buvRzG6Jpv6D5OU2+P2w/
M9miCBda46/Ee0PcMjMZiI69BFNUG8T59lhx9y/+4DfpPKgQi9ZkHVqn9l/x
bj13TviH+oAT2MzGqr7NCPlAus4QJpMxjMcTmIzRnrXrwGg8gtFQfL7M11v8
rlX86noL4SE+xsBulzDAa6GuJ4d6vGAfFhsfDnEMUejDajogz9kZ0fWW+sHF
WBsvwA8Pqj6dv13BgPCKFkej31vs5Vw/VLnV0d6D2YDuaadIR9TjHAfTNexP
tfAOoQdzEm+bx+M0va4WxHvf70PYeyjPpDOEXRge17c9Xt8SWGl96EyWEESi
D8U72O/WWh9ewJz4jm1cdoDlkNpBl7qS3KL/TXpCx5nAVnCXbHfob2CE6/MY
9KBDJGNwqbz+zNvUXP3xf71a+Cw8xeziX3EJz5n3ZziGqT8vfqexntVm7hj1
rK6Yux5E4vo42sN6Rq+n9z8Qjpsa9k91ocdn1fvFBJaO9jydPsykzT+qHt3T
lMtwrIjN15HHZVzk+US15mo7vtOvHc1d8WyylkQE3nqK7BAXRjvMbepZh20+
FjqOWIsc2nb8jufWuggNuSnB+kYX1iZ1iNioKbdgTph54r2sxto8xXNKxscb
+rJlGyTweMvHJN0fUbsHXQvmWoxQMR+4GNu4QznVY9fQaLLXGFhtvzi+oNTe
EK6z3/unv/2S4u6f/s4T+bXzCrbQNusQAtaNrTmOKPdzSgx1XsbH5ji9WIxZ
0SedjhoP+rtREHuTnNPpvoLE0ZrsVVr7iZ4t+hhzgzk3NoQJWg/wOkfu7cyN
vE5yi52cV4nfe1y0dWW6dufY5vSZm17XCHg/Y7Nf4/wOOTeMNQpCmKK5SXNO
TTVq4vM6FrTrf11P6I5M9qo9yfEjXK7ZP1L5v3cd67D8w1dfNPOi+p28pbGH
bO3dScFWVYUvm+pZreZOQc8y11qg9nfMvTT+4TpijCmPO4LrgtK6pYWYidC1
1yrq9GA4nql4M7va1YLLsJ3A6Duk8XwFPaXiXG3Md9q1c9NaoX9He/7b1LPi
mjU+RkabRXNu2ozL13lilyF7gojURh2NnErtnxn6s3kbjs+J9SmsG+yRX7Mz
onsCrJs52p5wa/DDUJ0D26FsdbJCVHvFHjcVunlMRrnf+JD5WCVnS+6WHK72
SET/TsBbzU8xV2sSR9JqHaqJPKaMPntMYuCbkql456Z9hcb19hh70ZejY03n
vjPJ1hOSr9q356QcvAU4sg5vvw/j1Wm8Eptqz54vRmyled/ESF+yvRvzzzW7
rhFw/1r8MKQPS+qa0BosOAcZc1lf7G9iUgPFxmNt+5+OHfv1uP4CqVVC4oRy
UbmG73xzKSfSWBJar2ER0B6MsF/IYidvpGe1nDv69SPT3vMEvMdNfTh63Pn1
61nnpWPiXxlb1Tt/bX+0sNZLLYeFy87pUdo+vmCnrjtXa/IdtjOY93dH4PiZ
bh0/nwVN9SwS46SkA+OFC4G0Ke99WM9Hmo2oA8tiEGIzbgItP9hgW8U60HCF
13Otzj3iTGkb3UeRav9qqj9fvzCHmrcBNJ1Zi08iY9Gh8U94v0D8gnkMu4zn
Tr9D3mmVvQLpH7nvNK84mAu6I7N9OA7WBZt8yt/dQhzDAe0LkS++xTrkjGaw
8QKxb6vudMrs5Vr8SG4Pr1Hf41Q3J5J+GWn7DrYoLsCiZxniVs4Bz9OydcII
ss4MwT/Ex3OwNIkPPsqLzd8DrQku2+8oH0Wg+ZUKXdPwukaoyd1GO2+GiOSK
LDN9gvJKr0/9LjYea9v/VesNYb2W8vwBvI0Lrkslnaf633PZFvJ/8NpE685R
O/zIUs+0tZ7VYO4U+r9k8B1MuqLGT3eiZ43tMXR7bwOL6Qj6XYu/6cRp63PK
VlUuA7lE2fOksJ2ga6p1XXOu1uU7fO1A6F7ZuX9YxBwMcDu1/r1NPYvWgu8b
48Ug3JB4oaK/tiE3HX+crMtr3Dzir9P1I4Oe1Z8a6zfF/pLs9XoF3aBpG2R+
m2PtdwnCS2QsYZ4fGH1HY9eDZRrb1s3jtLFNxl4blMYbTCzF4bHfGN8D951e
e3VwyhVP98nU3ovei5hf2e+1WIcIF/UcGM+W4BnORkvjU6LIz215Qm8O4+O9
DnGIbKwD2AldQH7feCRn5MF8PNByE03SQz60NvEYdDzXjQ/B/rs6kvMBrWdM
pQP94RiWYjwW00GbXtcAZ7mbxhuW9yFtd94Ptv2bkKF939y6/yusS8f75GOs
St5SOk9rAftecWxpxbyZJnpWu7kD9epiRi6pVX5sId2X1t3mmKDXKV2sXVjL
+pQmWa1hZ04sLz7qIVS52jPBT8UxZbAtNeAyBZIXgX2H1NZlrHNdZa425js6
zysLXo/glv2G4U69Yxn3Xvaedb84nWPNuCkFzqfFMTNYn+gM9HgF/Z4lNhLQ
6h0b3nuzNlAbe38u9vE+PgsygPUYjW3Nzo7fS5obnfsau+rcvTA7hy+PhcD7
TaPP/QQcv2YdR9gep/MTicWQn48zO73ujxhnebdBnuvVwzzafB2yfdYbo7N+
Eq9gc6sq9Jwq6RuZ2eP8SriJxDpWzAfLgfVie66X9eptvb1z9t7IuEhguxgb
/U+59GFVTJJseF1NVODuKbbhnulDfG5MJT3rouJ+pUn/35Se9eQTRz3r9dfO
fhfdRcuPOb630DXFoRbRSM9qNXegcv8dv2vyB9B9aSEvvwHa1SmtepOgENeK
4+2aclkKsoakfYL9NIa9uUKtuVqX7+i7qizamYO3mm9YFWTN1eN9mnFTBuxD
Q3sZ7K+bFgy52j3PnRURl/jwGraB1hmpIjRfAutwab5kwX6F8rmOPkscD1aW
v6XZsyzvXec9croW9il30dlZ8iwPwd2v/xaN+5jJTo3QXhj9Xpt1yJP1Cicj
6PeK+7F0rBf8VzWEnOd22Gn6WhdG04XKu93KmmdCdw5DD9k4c26SbcDPXm9P
HufvXuPKSldrNW82Z2Juy8+pTyAKPFUzcDToG3ja5ldpel3VhzzH3XKfXbUP
bfEnlFek/dTp0mcwxX637v+2epasZdHtQLfbJfKz3z3qWd/+x78vfCal0zH7
G/YFf8sl6a8y+0MTPavd3IFa9qwkQDb6TE9IYIXmX63za5JY5YTK83Awbq/2
fUTyOjJfbwsuS4HzItI+obHFltypCnO1Od/Ree7MpH3DPzPXPFS/9ohGehba
m+m+pGvRs8j6Xqzd0ISbzL990kWIv85clwnHi/dKziU43oLGmRbjwuu3YVPr
XEjDuMR2WWep7jfInid9h7nNrDNYq5oQ2TUF+xoGzU2w2fpIfJbmv8b9S2qL
/eRHR3vW+99GxrvsNwf5jPE7uS49II48mOL9W6rLJVIf28JOXDd38vbM3GM9
WPn3NXqe8XKj/r4V1wTIqUViNyw5T3KsGPNrz+nyBPKMsoS8P1KnxJAvT65O
jtfnTUL3bhLfUooYfC1PuhqPNL3O9nP1Yj7K6uHRc01wLokhpwfXcj6NiwIf
te3/tnqWJQ7+h+85nm34L3/9l1ZOMtpuCF+K542o37+sgkvT+Kw2c6fA7yXD
DO8fcUwq9dlUrLlcsq600bMCMW8cZwADIYsKPjVsm03jvVtxWQbss3HEe8f1
JkrOZ6o0V5vzHY3DbMYpeH3T89TM0PdmVfW2GFajPnR7PSHD8rFd2Z5Vg5sQ
sE16sAqFypGvyzb7OJkX58YxPlOha+bBWm0g/dGByWp7qrmviwebBaozQnKl
k1ynF/2z2+V7Opxvk42H03fS3yrE5NOnqVSnHfdhmR0U10a4euXlo5713NPq
PjYbLvHbX6cekOzy3zLsXbOcRT0GPvMN22NLyDpmq+9Kch8wN9Ezyex1MvD3
8pg/bENQtkrb1agGWa7L0hrddr9HAv52A66Mmd76eV2HvZeNV0vKBOHFlEea
XtcIFWwWwbLaeZv2OAhzjRpiA5Gi17S7bNf/rfWsJIDpUKzLgyEMh7l4H3pW
zdX/ePER+ftR5Do+Atfos6Ex792eef9kQrO6Du3mjp5vaK8zSmtwkhphepxE
hfxZWqOXrnFt9Cw8Z+xnp2V3Ijnvaf5HOy7LgeNUJqtlvs8v8yFVmKtt+I7M
c5vvUiLywXU3sHFd8LSED3L+gdAZS5dTKPpkqteJoO9nVGJ0IrxU4K+G3ISB
88ycGayyNuNcoMKDk/oiZefu0HOoLGO+RhuojlfyniUu6fzF+ke+t+qo81+y
MYdul88X/B1Lra/sWc7k3Z6A57PObcReiGxdV6ge/OkpSI0TYx+3XYcQQres
71G+JrH3xWIfVswp0EHzAgRvFlJrPa0GMeUmf4Hri3SMZ/NsZ/g7yDZQ4PlZ
UR+NaE4Krg3rzfH5E+bcI1on1snGBa6JaM6T3hvzKppe1wha7r1xG6ud9dY1
nFET+ytaa3tK8/Zs+3u6LhT9Bm36/6bis6qfb1h+Lzymi/nmFE3rZ7WaO4Y6
peO1vrM/wGqE9aKiPYa24ULlVplT+A6Fs6b08dBGz6Lnj4jfnqwt18fgTui5
M+kevS2XZdBq0mX6QlmyQKW52oLvtHjc3nhdXCvE3gPHTxfs28h/lM5ZY41N
gf1Gi3Mz5GqUjXuPnOnUN8aOJnuXPFPRxtacmzD0s9LT8VnGzHQ/MTCeWxWs
6VkAZedIV2tDkq/ZF+dtnup3UTwh8c8VaiBfFP2B2tpxTleQIPUGrfk79tpf
qmkufXeTU6w7Pd9Q4OAX9SwxlvQltek6NJotYSfPId25MNPOsiqMJzS/6XsJ
sn1wd1SSm0Hq812o+rzTxRJWqzUspsPzMUcJ1ScVBwynsBL7qdViqvnTi7pt
sc5KT9x/JfZkK5gWasRp+nNcHCeDyVzoqxtYr+Yw0s44G6A80b12305/BEt3
B77vgbucQZ+cB4NscA2va4RLvW97MJnPYb6gddpwLev0Hc7UO1zCbKz3YVke
c3Hd0c8YmmBdoEX/35SeJc96V7bnDz9z9rsFFPr7QtkmzmnKjevBt5k7lnN3
5Fmzy+VSyKxwDoB5X3BAcQepdFRc02a7g606k3VU9NEaarq2i88y+Ql6qh2u
jI8QY2o5n0BPP6cJ19xty2W4Twr5fWd8uxXnahu+o7qL7OMBzFcubIzvyGxr
oHbt05gbjNWZ5bvdFlwxb4f9YlzwwrB2lcZnRcWas4PJArZiXQv8HSwL9adM
PqgW3ISg6/CmdchwkcZtHRjOVirOb7t1YaLlYpT5Eiq3gZzr3rWej27/XfzO
ac6ilGJdmuIZDOc4Fvvri3Us0kbRPO1CPakkILZ8xU3OGH76x08p7v7fl4aG
dYuObTIXG65D1t/vzwqcj/Maid6I7OPnzgfy5oOSZ7pQ59BOsvNkDPMhqnam
WHe4NNrr6J7dJuaadPqeyCrOXOu74hmkNplqNvFm1zUD8aegvqDvIIHNtF+h
TT1DDiTOHzFxXaTllNO8xsb9T3K47LpMXT1L5ay873j2ztWr9c+v3Wr9XbZH
TVFHzyo8Z9O5Q+pv9cA5l49msp3krYTF0FarxMQHo8J5HZWe9RxqnP13vMe4
oEu05rITdHtJlXimanO1Dd8lBVueTWa2w6QF/GXFMzWVmO2s+vOa4iMO3rxi
7mfHWE+9LTfl2Gvrenk8Y4rYW1Rsv2OuD1azDUFWa+Gieq0Xod+PUFuw/4Tq
oebYQt1uUF5vBNeCt9dWxrXgrb72kK4b33n0guLsnz35hOEsD2k30M6V0uIv
m6xDRW6Q53ztjDkA+f6E2inyOPxOqX85hYzfLuwVL6SeOVW+ijzWy7KvS/aw
sOmgXQfmbvn+Yb9dFPbvqTjjOfhlrz/2YTY080+nN1D3Ns+CBHbLKfQt9+0P
Z7Azzp+m1zVBDJu5XkPCvA/fb+aaPQ33oa1+Nq5pMDCun3K/QM6F62vxEE36
H8cs9O2cUq12HsXl1794tD9/62uVvo+RaHXzq8SGl9YRwvkwtvMemswdEg8k
+y+E2cC0zndgNN9UqrGgOKCMo6R9yMJDlZ/1LCJYzwz2M9KOHkyWW+vvt+Yy
CWJb0M+Rs6HGXG3Bd4E7Mz6ffNfqWnNSNUHkrWHUL9et+6PydmCd1rY+x/tN
6X26zqSEK6+Bm7K25vOrQ84dK0cS7oq2K/KultY43bptwPmowwr7uxRbXHsD
xYQQP7rNLk/iFYvnHWKQ+vZW+x3NnbDVdj5+NYDlZKD49nvPf0Bx9uqD7yPz
fDx3s9xAeU4CnluFvU/NdSgM9xAEgZIwurnsaBMO4t77MIJ94EMQNrh3Eqva
y/us/fXYVtY5lnWb1fPvQ6hREl/c+qD67njvvTo/tvJ9ZZv3QXbfqnVGz1+X
qPMsa4nxoRPRN/LzGJIzbTuoNoUQib7wRT/U6IZWaNP/14mr7fePvsN3v0Us
KNebiWrC9eS3Q725Y/G7pu8gOL2D+vVyY9j7O3DdNbibLWzEv7Iugr9vb5ut
hwTCwFPx3Ov1Clarlfh3A14QVl4jW3EZ0bfLfUKmtledq835LjnN8+O1+5pc
mf3KIQRf+gvXa9XHUjZbD8ImP1YCea75TsYgZ2NqK97J3fBDE2Tt34r2i75y
ZR9dSzHqNw5wjJk1dixanzkn1IDwh/D6U7+uOPs/Z/8O253X6nyV+7IOMW4P
dc8i0ddNRjNcvvDRo03rG1+54TvRPMVWelYd1KlTyqgN/E6r2lEZjAcLYt+1
1y/AuYSV/Q+CoxVXv/Cxa2ww43ECqelTVTpn8nkZZ3H1ygaSd71ZibRvXT8i
cJdzGGsxlvo51DcG1rOuHYd9AL6/g8UY+x6qxfIwGA8ZOK/RassK3dq2LOV7
SHn6Fft5pwxGKZL4eH5teDyL8pxIP8Bt+4ofKmRtB+U//OBTAD+/5j411Ukt
raN8zaiYR8CoigNMDTFPbMtiMCKYD/rQd/rgGOoGZd/azqHfE9/rOzCvYtcX
nCy5uWkdHgaDcQ/wWgzJR451Sy8//3E4GyxTBzh3WcZrLqrFml8bEk+dq9qR
4izYntUaB5hoetZg5t7uO2UwHhcILpacrPbBgqMlVzMYjDcmrv77VUiefcdR
13rxs9era4nfiq85XphxdwhlvPw+AE+e9cC0z2DcDKSOJbhY6ViCm69+8Opd
t4jBYLTE1ctrlXuY2bWu24fIYDAYjPMQ3JvZsQQnS25mMBgPA0rXOtm1ZEzA
zcTGMxgMBsMEFfN+isdSdizWsRiMBwdpn07jtWR+i6r5cAv1tRgMBuOxheBY
VbtB5hWe4rHYV8hgPGC8Fh/zENM5/+63qLrxTc7oYTAYDIYZklMlt6YxG2pv
K/MKOeadwXgsIGu1pLVMM/nwM4oHrr770rGWy09+pM5LZDAYDIYFkiMFV0rO
lNx5+c0XFZdibpU1SLk+FoPxeELGDKjzEN/7VqpzsbCwsLA0F8Gpkls5FpbB
YCiIPdnVegmXThcuH30CkueehuT9b4fkySfunq9YWFhY7qtIjpRcKThTcqfk
UMml7AtgMBgMBoPBYDAYDAaDwWAwrg/T6ZSFhYWFhYWFheUGJIoiFhYWFhYW
FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
FhYWFhYWFhYWFhYWFpYbkP8HrOO9Vw==
"], "Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVVwdUU0kXnldSCAktEAEpoTdBOgGk1wgCho6NkIQQSggJQcVeFhVcu4hg
RVdFbGsBZK3YyyLY+8aCirIuFmyo/JME0HX/cv57zsz73p1773z3vpl3Ziyy
CjnZKABARoYdhzsxRCrlTk7UgS/JYplIKBbw2eJigVAgZWUhUOmpDTug7cmV
SPJRaFUgLpZyokKZaekZTJICkIEpoAEW8ObyZJKQhIRYpfXA8+/y7jpQBgRX
nJWx/jn+X0WXL5DxAEASIM7iy3gFEO8HADfmSaTFABDaoN5qYrFEid9CrC+F
BAEgKpPUF6qxiRJnqbGryiaJEwZxOABkKpcrFQKgpYzPLOEJYRwtCcSuYr5I
DPEGiAN5OVw+xAqIhxUUFEKsTYXYPuu7OMK/xcwajMnlCgexOheVkMNFMkk+
d/L/WY7/LQX58oE5LGGj5kijOcqcYd225RXGKDHkjhwSZ8XFQ6wH8VkRX2Wv
xLdz5NHJ/fZdPFkYrBlgAIACPjc8BmJYS5Qhz0sO6cfuXKnKF9qjcaJidlI/
zpIWcvrjoyXi/LjY/jjzcwTsAbxOIItIHLDJFkWyIYYrDd1fmpOUquaJniwR
pcRBrAVxmywvMabf935pTljcgI1UzlFytob4bbY0kqO2wQwLZAN5YS48rmou
Q4iDi3OSotW+WJpAlhY7wIEvCI9Qc8D4AnFyPzcMrq5QTr9vmSQ/od8eWyfI
j+Ko64ztkZUkDvheLoYLTF0H7GEud2SCmj/2TlKckKTmhuMgFoSBcMAEctiy
QCHIBaLWrsYu+KYeiQRcIAVCIADO/ZoBj1TViBj2iaAU/AmRAMgG/UJVowJQ
AvVfBrXq3hlkq0ZLVB554AnEBbgxHoj747GwD4bNHWfhvgN+TO2BWYkRxHBi
NDGS6DDIgwdZ58MmBaJ/o4uBTwHMTslFPJDDt3iEJ4R2wkPCNYKCcAukgMeq
KP1WE0SzpT8wZ4JRQAGjRfZnlwVjdg7Y4LaQtRceigdA/pA7zsCNgTPuCTMJ
wYNgbl5Q+z1D+SC3b7X8cT4l6+/z6ddrOWp59bPIGvwyYYNWP0YJ+65GfPiM
+dESm4/tw85gx7Fz2CGsETCxo1gTdhE7rMSDK+GxaiUMzMZRccuDcUQDNq71
rp2un/8xO7efgVT1vUGxYFKxckOEFUomS0XCnGJmCPwjC5hsMc9lGNPd1c0b
AOX/Xf37eMNQ/bcRxvlvuqJjAPiWQ6Xwm45rBcDBJwDQ333TWb2G22sJAIfb
eHJpiVqHKzsCoABtuDOMgBmwAvYwJ3fgDfxBMIgAI0E8SALpYDyseg4ogKwn
gqlgFigDFWAJWAmqwXqwCWwDO8Fe0AgOgePgNLgA2sA1cAeujQ7wAnSDd6AX
QRASQkPoiBFijtggTog7wkICkQgkFuEg6UgmIkTEiByZisxBKpBlSDWyEalD
fkUOIseRc0g7cgt5gHQir5FPKIZSUX3UFLVFh6MsNASNQZPQcagQLUJL0bno
IrQKrUV3oA3ocfQCeg1VoC/QHgxgmhgDs8CcMRYWhsVjGVg2JsWmY+VYJVaL
7cKa4be+gimwLuwjTsTpOBN3huszGk/GeXgRPh1fiFfj2/AG/CR+BX+Ad+Nf
CTSCCcGJ4EdgE9IIQsJEQhmhkrCFcIBwCu6dDsI7IpHIINoRfeDeTCfmEqcQ
FxLXEncTjxHbiY+IPSQSyYjkRAogxZO4pGJSGWk1aQfpKOkyqYP0gaxJNie7
kyPJGWQxeTa5krydfIR8mfyU3Kuho2Gj4acRr8HXmKyxWGOzRrPGJY0OjV6K
LsWOEkBJouRSZlGqKLsopyh3KW80NTUtNX01R2uKNGdqVmnu0Tyr+UDzI1WP
6kgNo46lyqmLqFupx6i3qG9oNJotLZiWQSumLaLV0U7Q7tM+aNG1XLTYWnyt
GVo1Wg1al7Veamto22iHaI/XLtWu1N6nfUm7S0dDx1YnTIerM12nRuegzg2d
Hl26rptuvG6B7kLd7brndJ/pkfRs9SL0+Hpz9TbpndB7RMfoVvQwOo8+h76Z
foreoU/Ut9Nn6+fqV+jv1G/V7zbQM/A0SDGYZFBjcNhAwcAYtgw2I5+xmLGX
cZ3xaYjpkJAhgiELhuwacnnIe8OhhsGGAsNyw92G1ww/GTGNIozyjJYaNRrd
M8aNHY1HG080Xmd8yrhrqP5Q/6G8oeVD9w69bYKaOJpwTKaYbDK5aNJjamYa
ZSoxXW16wrTLjGEWbJZrtsLsiFmnOd080FxkvsL8qPlzpgEzhJnPrGKeZHZb
mFhEW8gtNlq0WvRa2lkmW8623G15z4pixbLKtlph1WLVbW1uPcp6qnW99W0b
DRuWTY7NKpszNu9t7WxTbefZNto+szO0Y9uV2tXb3bWn2QfZF9nX2l91IDqw
HPIc1jq0OaKOXo45jjWOl5xQJ28nkdNap/ZhhGG+w8TDaofdcKY6hziXONc7
P3BhuMS6zHZpdHk53Hp4xvClw88M/+rq5Zrvutn1jpue20i32W7Nbq/dHd15
7jXuVz1oHpEeMzyaPF55OnkKPNd53vSie43ymufV4vXF28db6r3Lu9PH2ifT
Z43PDZY+K4G1kHXWl+Ab6jvD95DvRz9vv2K/vX5/+Tv75/lv9382wm6EYMTm
EY8CLAO4ARsDFIHMwMzADYGKIIsgblBt0MNgq2B+8JbgpyEOIbkhO0JehrqG
SkMPhL4P8wubFnYsHAuPCi8Pb43Qi0iOqI64H2kZKYysj+yO8oqaEnUsmhAd
E700+gbblM1j17G7R/qMnDbyZAw1JjGmOuZhrGOsNLZ5FDpq5Kjlo+7G2cSJ
4xrjQTw7fnn8vQS7hKKE30YTRyeMrhn9hOPGmco5k0hPnJC4PfFdUmjS4qQ7
yfbJ8uSWFO2UsSl1Ke9Tw1OXpSrShqdNS7uQbpwuSm/KIGWkZGzJ6BkTMWbl
mI6xXmPLxl4fZzdu0rhz443H548/PEF7AnfCvkxCZmrm9szP3HhuLbcni521
JqubF8ZbxXvBD+av4HcKAgTLBE+zA7KXZT8TBgiXCztzgnIqc7pEYaJq0avc
6Nz1ue/z4vO25vXlp+bvLiAXZBYcFOuJ88QnC80KJxW2S5wkZRJFkV/RyqJu
aYx0iwyRjZM1FevDo85Fub38J/mDksCSmpIPE1Mm7pukO0k86eJkx8kLJj8t
jSz9ZQo+hTelZarF1FlTH0wLmbZxOjI9a3rLDKsZc2d0zIyauW0WZVberN9n
u85eNvvtnNQ5zXNN586c++inqJ/qy7TKpGU35vnPWz8fny+a37rAY8HqBV/L
+eXnK1wrKis+L+QtPP+z289VP/ctyl7Uuth78bolxCXiJdeXBi3dtkx3Wemy
R8tHLW9YwVxRvuLtygkrz1V6Vq5fRVklX6Woiq1qWm29esnqz9U51ddqQmt2
rzFZs2DN+7X8tZfXBa/btd50fcX6TxtEG25ujNrYUGtbW7mJuKlk05PNKZvP
/ML6pW6L8ZaKLV+2ircqtnG2nazzqavbbrJ9cT1aL6/v3DF2R9vO8J1Nu5x3
bdzN2F2xB+yR73n+a+av1/fG7G3Zx9q3a7/N/jUH6AfKG5CGyQ3djTmNiqb0
pvaDIw+2NPs3H/jN5bethywO1Rw2OLz4COXI3CN9R0uP9hyTHOs6Ljz+qGVC
y50TaSeunhx9svVUzKmzpyNPnzgTcubo2YCzh875nTt4nnW+8YL3hYaLXhcP
/O71+4FW79aGSz6Xmtp825rbR7QfuRx0+fiV8Cunr7KvXrgWd639evL1mzfG
3lDc5N98div/1qvbJbd778y8S7hbfk/nXuV9k/u1fzj8sVvhrTj8IPzBxYeJ
D+884j168Vj2+HPH3Ce0J5VPzZ/WPXN/dqgzsrPt+ZjnHS8kL3q7yv7U/XPN
S/uX+/8K/utid1p3xyvpq77XC98Yvdn61vNtS09Cz/13Be9635d/MPqw7SPr
45lPqZ+e9k78TPpc9cXhS/PXmK93+wr6+iRcKVd1FMBgQ7OzAXi9FQBaOjw7
wHscRUt9/1IJor4zqhD4T1h9R1MJPLlsDYZX2ZkAxMIzyjrYbCCmwqfy+J0U
DFAPj8HWL7JsD3d1LCq8xRA+9PW9MQWA1AzAF2lfX+/avr4vmyHZWwAcK1Lf
+5RChGf8DS5K1NbxEvwo/wJxZnpO
"], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> Association["Comments" -> Association["XML:com.adobe.xmp" -> "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core 5.4.0> <rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description rdf:about=xmlns:exif=http://ns.adobe.com/exif/1.0/xmlns:tiff=http://ns.adobe.com/tiff/1.0/> <exif:PixelYDimension>64</exif:PixelYDimension> <exif:PixelXDimension>1618</exif:PixelXDimension> <tiff:Orientation>1</tiff:Orientation></rdf:Description> </rdf:RDF></x:xmpmeta>"]]];


SEAuthPage[scope:_String|{__String}|Automatic:Automatic]:=
URLBuild[
$SEAuthURL,
If[scope===Automatic,
{
"client_id"->$SEClientID,
"redirect_uri"->$SERedirectURI
},
{
"client_id"->$SEClientID,
"redirect_uri"->$SERedirectURI,
"scope"->Replace[scope,_List:>StringJoin@Riffle[scope,";"]]
}
]
];


SEAuthDialog[scope_:Automatic]:=
  OAuthDialog[Dynamic@$SETempAuth,
    "Authorize the StackExchange API",
    Column@{
      Row@{
        "Go to the ",
        Hyperlink["OAuth Site",
          SEAuthPage[scope]
          ]},
      Mouseover[
        Style["Trouble finding the key?","Message"],
        Image[$SEKeyExample,ImageSize->350],
        ImageSize->All
        ]
      },
    "https://api.stackexchange.com",
    WindowTitle->
      "StackExchange Authorization"
    ];


SEAuthorize[scope:_String|{__String}|Automatic:Automatic]:=
  Replace[
    SEAuthDialog@scope,
    key_String?(StringLength@StringTrim@#>0&):>
      ($SEAuthToken=key)
    ];


StackExchangeInterface[site_:Automatic]:=
  DynamicModule[
    {
      function=SEQuestions,
      search=
        Replace[
          site,
          Automatic:>$StackExchangeSites["Mathematica"]
          ],
      fields=<||>,
      results=None
      },
    Column[{
      Row@{
        Dynamic@
          If[MatchQ[$SEAuthToken,_String?(StringLength@#>0&)],
            Tooltip[
                Mouseover[
                  Style["Authorized","Hyperlink"],
                  Style["Authorized","HyperlinkActive"]
                  ],
                $SEAuthToken],
            "Not Authorized"
            ],
        " | ",
        Button[
          Mouseover[
            Style[
            "Authorize",
            8,
            "Hyperlink"
            ],
            Style[
            "Authorize",
            8,
            "HyperlinkActive"
            ]
            ],
          SEAuthorize[],
          Method->"Queued",
          Appearance->"Frameless"
          ]
          },
      Grid@{
        {"Call Quota","Calls Remaining:"},
        {Dynamic@$SECallQuota,Dynamic@$SECallsRemaining}
        },
      Row@{"Last call: ",
          Pane[
            Dynamic@
              Replace[$SELastCall,
                _String:>
                  Column@
                    DeleteCases[
                      Normal@SECallInfo@$SELastCall,
                      "access_token"|"key"->_,
                      \[Infinity]
                      ]
                    ],
            300]},
      Grid[{
        {"Search for:","Search site:"},
        {
          PopupMenu[
            Dynamic@function,
            {
              SEQuestions->"Questions",
              SEAnswers->"Answers",
              SEUsers->"Users"
              }
              ],
          PopupMenu[
            Dynamic@search,
            Reverse/@Normal@$StackExchangeSites
            ]
          }
        },
        Alignment->Left],
      Table[
        With[{key=First@field},
          InputField[
            Dynamic[
              Replace[fields[key],_Missing->""],
              (
                results=None;
                fields[key]=#
                );&],
            String,
            FieldHint->key
            ]
          ],
        {field,#}
        ]&/@Partition[Options@function,2]//Grid//Dynamic,
        Dynamic[
          If[
            MatchQ[results,None|_SEQuestions|$Failed],
            Button["Submit Call",
              results=function@@Prepend[Normal@fields,search],
              Method->"Queued"
              ],
            Replace[
              results,
              _List:>Column@results
              ]
            ]
            ]
            
      },
      Dividers->{{},Thread[{2,3,4}->GrayLevel[.8]]}
      ]//Panel
    ];


SELookup[
  (SEUser|SEAnswer|SEQuestion)[a_Association],
  fields:_String|{__String}
  ]:=
  Lookup[a,fields];
SELookup[
  (SEUser|SEAnswer|SEQuestion)[a_Association],
  fields:_String|{__String},
  defaultKey_
  ]:=
  Lookup[a,fields,defaultKey];


SEGather[obs:{((SEUser|SEAnswer|SEQuestion)[_Association])..}]:=
  With[{data=Merge[First/@obs,Identity]},
    data
    (*Switch[First@obs,
			_SEUser,
				SEUsers@data,
			_SEAnswer,
				SEAnswers@data,
			_SEQuestion,
				SEQuestions@data
				]*)
      ];


End[];



